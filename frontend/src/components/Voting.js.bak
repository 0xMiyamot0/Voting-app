import React, { useState, useEffect, useContext } from 'react';
import {
  Container,
  Typography,
  Box,
  Alert,
  Snackbar,
  Card,
  CardContent,
  Grid,
  Avatar,
  Chip,
  LinearProgress,
  Fade,
  Zoom,
  Fab,
  IconButton,
  Tooltip,
  Button,
  Rating,
  Paper,
  Divider,
  Stepper,
  Step,
  StepLabel,
  useTheme,
  useMediaQuery,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  TextField,
  DialogContentText,
  CircularProgress
} from '@mui/material';
import {
  HowToVote as VoteIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Logout as LogoutIcon,
  Person as PersonIcon,
  Business as BusinessIcon,
  ArrowForward as ArrowForwardIcon,
  ArrowBack as ArrowBackIcon,
  Star as StarIcon,
  EmojiEvents as EmojiEventsIcon,
  Close as CloseIcon,
  Edit as EditIcon,
  StarBorder as StarBorderIcon,
  StarHalf as StarHalfIcon,
  ExpandMore as ExpandMoreIcon,
  Folder as FolderIcon,
  Group as GroupIcon,
  Assessment as AssessmentIcon,
  Send as SendIcon
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';
import { useNavigate } from 'react-router-dom';

// Configure axios to include credentials
axios.defaults.withCredentials = true;

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: (i) => ({
    opacity: 1,
    y: 0,
    transition: {
      delay: i * 0.1,
      duration: 0.5,
      ease: "easeOut"
    }
  })
};

// Define criteria array at the top level
const EVALUATION_CRITERIA = [
  { id: 'behavior', label: 'رفتار و اخلاق کاری', description: 'نحوه تعامل با همکاران و رعایت اصول اخلاقی' },
  { id: 'communication', label: 'مهارت‌های ارتباطی', description: 'توانایی برقراری ارتباط موثر با همکاران و مدیران' },
  { id: 'responsibility', label: 'مسئولیت‌پذیری', description: 'تعهد به وظایف و انجام به موقع کارها' },
  { id: 'initiative', label: 'ابتکار و خلاقیت', description: 'توانایی ارائه راه‌حل‌های خلاقانه و پیشنهاد ایده‌های جدید' },
  { id: 'teamwork', label: 'کار تیمی', description: 'توانایی همکاری در تیم و مشارکت در پروژه‌های گروهی' },
  { id: 'performance', label: 'عملکرد و بهره‌وری', description: 'کیفیت و کمیت کار انجام شده و دستیابی به اهداف' }
];

// Define steps array at the top level
const EVALUATION_STEPS = ['راهنمای ارزیابی', 'ارزیابی کارمندان', 'مرور و تایید نهایی'];

const CRITERIA = [
  { id: 1, name: 'حسن رفتار و حفظ شئونات', icon: <PersonIcon /> },
  { id: 2, name: 'همکاری و مهارت های ارتباطی', icon: <PersonIcon /> },
  { id: 3, name: 'دانش و علاقه به یادگیری', icon: <PersonIcon /> },
  { id: 4, name: 'کیفیت کار و سرعت عمل', icon: <PersonIcon /> },
  { id: 5, name: 'پیشبرد به موقع کارهای محوله', icon: <PersonIcon /> },
  { id: 6, name: 'مسئولیت پذیری و جدیت در کار', icon: <PersonIcon /> },
];

const criteria = [
  { id: 'behavior', label: 'رفتار و اخلاق کاری', description: 'نحوه تعامل با همکاران و رعایت اصول اخلاقی' },
  { id: 'communication', label: 'مهارت‌های ارتباطی', description: 'توانایی برقراری ارتباط موثر با همکاران و مدیران' },
  { id: 'responsibility', label: 'مسئولیت‌پذیری', description: 'تعهد به وظایف و انجام به موقع کارها' },
  { id: 'initiative', label: 'ابتکار و خلاقیت', description: 'توانایی ارائه راه‌حل‌های خلاقانه و پیشنهاد ایده‌های جدید' },
  { id: 'teamwork', label: 'کار تیمی', description: 'توانایی همکاری در تیم و مشارکت در پروژه‌های گروهی' },
  { id: 'performance', label: 'عملکرد و بهره‌وری', description: 'کیفیت و کمیت کار انجام شده و دستیابی به اهداف' }
];

const steps = ['راهنمای ارزیابی', 'ارزیابی کارمندان', 'مرور و تایید نهایی'];

// Custom Rating Component
const CustomRating = ({ value, onChange, max = 5 }) => {
  const [hover, setHover] = useState(-1);
  const [hoverLabel, setHoverLabel] = useState('');
  
  const ratingLabels = {
    5: 'عالی',
    4: 'خوب',
    3: 'متوسط',
    2: 'ضعیف',
    1: 'بد'
  };
  
  const handleMouseMove = (event, index) => {
    const ratingValue = max - index;
    setHover(ratingValue);
    setHoverLabel(ratingLabels[ratingValue]);
  };
  
  const handleMouseLeave = () => {
    setHover(-1);
    setHoverLabel('');
  };
  
  const handleClick = (index) => {
    const ratingValue = max - index;
    onChange(null, ratingValue);
  };
  
  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>
      <Box sx={{ display: 'flex', alignItems: 'center' }}>
        {[...Array(max)].map((_, index) => {
          const ratingValue = max - index;
          const isFilled = hover >= ratingValue || value >= ratingValue;
          
          return (
            <Box
              key={index}
              sx={{ 
                position: 'relative',
                display: 'inline-block',
                cursor: 'pointer',
                '&:hover': {
                  '& .star-icon': {
                    transform: 'scale(1.1)',
                  }
                }
              }}
              onMouseMove={(e) => handleMouseMove(e, index)}
              onMouseLeave={handleMouseLeave}
              onClick={() => handleClick(index)}
            >
              <StarIcon 
                className="star-icon"
                sx={{ 
                  fontSize: '2rem',
                  color: isFilled ? '#FFD700' : 'rgba(0,0,0,0.26)',
                  transition: 'all 0.2s ease',
                  position: 'relative',
                  zIndex: 1
                }} 
              />
            </Box>
          );
        })}
      </Box>
      {hoverLabel && (
        <Typography 
          variant="body2" 
          sx={{ 
            color: '#666',
            minHeight: '20px',
            fontWeight: 500
          }}
        >
          {hoverLabel}
        </Typography>
      )}
    </Box>
  );
};

function Voting() {
  const { isAuthenticated, logout, isAdmin } = useAuth();
  const navigate = useNavigate();
  const [employees, setEmployees] = useState([]);
  const [groupedEmployees, setGroupedEmployees] = useState({});
  const [ratings, setRatings] = useState({});
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [hasVoted, setHasVoted] = useState(false);
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [loading, setLoading] = useState(true);
  const [activeStep, setActiveStep] = useState(0);
  const [currentEmployeeIndex, setCurrentEmployeeIndex] = useState(0);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [openDialog, setOpenDialog] = useState(false);
  const [ous, setOus] = useState([
    { name: 'زرین معدن آسیا', label: 'زرین معدن آسیا', logo: '/logos/zmg.webp', active_users: 0 },
    { name: 'آیرما', label: 'آیرما', logo: '/logos/airma.webp', active_users: 0 },
    { name: 'بازرگانی', label: 'بازرگانی', logo: '/logos/trading.webp', active_users: 0 },
    { name: 'اعتماد ایرانیان', label: 'اعتماد ایرانیان', logo: '/logos/etemad.webp', active_users: 0 },
    { name: 'فلات زرین کیمیا', label: 'فلات زرین کیمیا', logo: '/logos/flat.webp', active_users: 0 },
    { name: 'سرب و روی ایرانیان', label: 'سرب و روی ایرانیان', logo: '/logos/lead.webp', active_users: 0 },
    { name: 'فناوری اطلاعات', label: 'فناوری اطلاعات', logo: '/logos/it.webp', active_users: 0 },
    { name: 'گسترش روی ایرانیان', label: 'گسترش روی ایرانیان', logo: '/logos/gostaresh.webp', active_users: 0 },
    { name: 'کیمیای زنجان گستران', label: 'کیمیای زنجان گستران', logo: '/logos/kimia.webp', active_users: 0 },
    { name: 'واحد حقوقی', label: 'واحد حقوقی', logo: '/logos/legal.webp', active_users: 0 },
    { name: 'مهدی آباد', label: 'مهدی آباد', logo: '/logos/mahdiabad.webp', active_users: 0 },
    { name: 'خاورمیانه', label: 'خاورمیانه', logo: '/logos/middleeast.webp', active_users: 0 },
    { name: 'مسئولین دفاتر', label: 'مسئولین دفاتر', logo: '/logos/office.webp', active_users: 0 },
    { name: 'سیمین معدن', label: 'سیمین معدن', logo: '/logos/simin.webp', active_users: 0 },
    { name: 'سهام', label: 'سهام', logo: '/logos/shares.webp', active_users: 0 },
    { name: 'تدارکات', label: 'تدارکات', logo: '/logos/procurement.webp', active_users: 0 },
    { name: 'ذوبگران رنگین فلز', label: 'ذوبگران رنگین فلز', logo: '/logos/zobgaran.webp', active_users: 0 },
    { name: 'زرین روی کاسپین', label: 'زرین روی کاسپین', logo: '/logos/caspian.webp', active_users: 0 },
    { name: 'زرین ترابر', label: 'زرین ترابر', logo: '/logos/transport.webp', active_users: 0 },
    { name: 'فلزات غیر آهنی', label: 'فلزات غیر آهنی', logo: '/logos/nonferrous.webp', active_users: 0 }
  ]);
  const [selectedOU, setSelectedOU] = useState(null);
  const [openAddEmployeeDialog, setOpenAddEmployeeDialog] = useState(false);
  const [newEmployee, setNewEmployee] = useState({ name: '', position: '' });
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');

  useEffect(() => {
    if (isAuthenticated) {
      fetchEmployees();
      checkVotingStatus();
    }
  }, [isAuthenticated]);

  const fetchEmployees = async () => {
    try {
      setLoading(true);
      const response = await axios.get('http://localhost:5000/api/employees');
      const employeesData = response.data.employees;
      setEmployees(employeesData);

      // Group employees by department (OU)
      const grouped = {};
      employeesData.forEach(employee => {
        if (!grouped[employee.department]) {
          grouped[employee.department] = [];
        }
        grouped[employee.department].push(employee);
      });
      setGroupedEmployees(grouped);

      // Update OU active_users count
      const updatedOUs = [...ous];
      updatedOUs.forEach(ou => {
        ou.active_users = grouped[ou.name]?.length || 0;
      });
      setOus(updatedOUs);

      // Initialize ratings for each employee
      const initialRatings = {};
      employeesData.forEach(employee => {
        initialRatings[employee.id] = {};
        EVALUATION_CRITERIA.forEach(criterion => {
          initialRatings[employee.id][criterion.id] = 0;
        });
      });
      setRatings(initialRatings);
      setLoading(false);
    } catch (err) {
      setError('خطا در دریافت اطلاعات کارمندان');
      setLoading(false);
    }
  };

  const handleOUClick = (ouName) => {
    setSelectedOU(ouName);
    setCurrentEmployeeIndex(0);
    setActiveStep(1);
  };

  const handleBackToOUs = () => {
    setSelectedOU(null);
  };

  const handleAddEmployee = () => {
    if (!newEmployee.name.trim()) {
      setError('لطفا نام کارمند را وارد کنید');
      setOpenSnackbar(true);
      return;
    }

    // Create a new employee object
    const employee = {
      id: Date.now().toString(), // Generate a unique ID
      name: newEmployee.name,
      position: newEmployee.position,
      department: selectedOU
    };

    // Add the new employee to the employees list
    setEmployees(prev => [...prev, employee]);

    // Update the grouped employees
    setGroupedEmployees(prev => {
      const updated = { ...prev };
      if (!updated[selectedOU]) {
        updated[selectedOU] = [];
      }
      updated[selectedOU].push(employee);
      return updated;
    });

    // Update the OU active_users count
    setOus(prev => {
      return prev.map(ou => {
        if (ou.name === selectedOU) {
          return { ...ou, active_users: ou.active_users + 1 };
        }
        return ou;
      });
    });

    // Initialize ratings for the new employee
    setRatings(prev => {
      const updated = { ...prev };
      updated[employee.id] = {};
      EVALUATION_CRITERIA.forEach(criterion => {
        updated[employee.id][criterion.id] = 0;
      });
      return updated;
    });

    // Reset the form and close the dialog
    setNewEmployee({ name: '', position: '' });
    setOpenAddEmployeeDialog(false);
    setSuccess('کارمند جدید با موفقیت اضافه شد');
    setOpenSnackbar(true);
  };

  const checkVotingStatus = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/check-auth', {
        withCredentials: true
      });
      setHasVoted(response.data.has_voted);
    } catch (error) {
      console.error('Error checking voting status:', error);
    }
  };

  const handleRatingChange = (employeeId, criterionId, value) => {
    setRatings(prev => ({
      ...prev,
      [employeeId]: {
        ...prev[employeeId],
        [criterionId]: value
      }
    }));
  };

  const isRatingComplete = (employeeId) => {
    if (!ratings[employeeId]) return false;
    return Object.values(ratings[employeeId]).every(rating => rating > 0);
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);
      const votes = [];
      
      Object.keys(ratings).forEach(employeeId => {
        const employeeRatings = ratings[employeeId];
        const hasRated = Object.values(employeeRatings).some(value => value > 0);
        
        if (hasRated) {
          votes.push({
            employee_id: parseInt(employeeId),
            ratings: employeeRatings
          });
        }
      });

      if (votes.length === 0) {
        setError('لطفا حداقل برای یک کارمند امتیازدهی کنید');
        setLoading(false);
        return;
      }

      await axios.post('http://localhost:5000/api/vote', { votes });
      
      setSuccess('رای‌های شما با موفقیت ثبت شد');
      setSnackbarMessage('رای‌های شما با موفقیت ثبت شد');
      setSnackbarSeverity('success');
      setOpenSnackbar(true);
      
      if (!isAdmin) {
        setTimeout(() => {
          navigate('/thank-you');
        }, 2000);
      } else {
        // Reset form for admin users
        setRatings({});
        setCurrentEmployeeIndex(0);
        setActiveStep(0);
        setSelectedOU(null);
      }
      
      setLoading(false);
    } catch (err) {
      setError('خطا در ثبت رای‌ها');
      setSnackbarMessage('خطا در ثبت رای‌ها');
      setSnackbarSeverity('error');
      setOpenSnackbar(true);
      setLoading(false);
    }
  };

  const handleCloseSnackbar = () => {
    setOpenSnackbar(false);
  };

  const handleLogout = async () => {
    await logout();
    window.location.href = 'https://zimg.co';
  };

  const handleOpenDialog = (employee) => {
    setSelectedEmployee(employee);
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setSelectedEmployee(null);
    setOpenDialog(false);
  };

  const isEmployeeRatingComplete = (employeeId) => {
    if (!ratings[employeeId]) return false;
    return Object.values(ratings[employeeId]).every(rating => rating > 0);
  };

  const getProgressPercentage = () => {
    if (!selectedOU || !groupedEmployees[selectedOU]) return 0;
    return ((currentEmployeeIndex + 1) / groupedEmployees[selectedOU].length) * 100;
  };

  const getCurrentEmployee = () => {
    if (!selectedOU || !groupedEmployees[selectedOU]) return null;
    return groupedEmployees[selectedOU][currentEmployeeIndex];
  };

  const renderStepContent = (step) => {
    switch (step) {
      case 0:
        return (
          <Box sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', color: 'primary.main', mb: 4 }}>
              راهنمای ارزیابی کارمندان
            </Typography>
            
            <Grid container spacing={3}>
              {EVALUATION_CRITERIA.map((criterion) => (
                <Grid item xs={12} md={6} key={criterion.id}>
                  <Card sx={{ 
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                    transition: 'transform 0.3s ease',
                    '&:hover': {
                      transform: 'translateY(-5px)'
                    }
                  }}>
                    <CardContent sx={{ flexGrow: 1 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                        <AssessmentIcon sx={{ color: 'primary.main', mr: 1, fontSize: 28 }} />
                        <Typography variant="h6" sx={{ fontWeight: 600 }}>
                          {criterion.label}
                        </Typography>
                      </Box>
                      <Typography variant="body1" color="text.secondary">
                        {criterion.description}
                      </Typography>
                      <Box sx={{ mt: 2, display: 'flex', alignItems: 'center' }}>
                        <Typography variant="body2" color="text.secondary" sx={{ mr: 1 }}>
                          امتیازدهی:
                        </Typography>
                        <Rating
                          value={3}
                          readOnly
                          precision={1}
                          dir="ltr"
                          icon={<StarIcon fontSize="inherit" sx={{ color: 'primary.main' }} />}
                          emptyIcon={<StarBorderIcon fontSize="inherit" sx={{ color: 'primary.light', opacity: 0.5 }} />}
                        />
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
            
            <Box sx={{ mt: 4, display: 'flex', justifyContent: 'flex-end' }}>
              <Button
                variant="contained"
                color="primary"
                endIcon={<ArrowForwardIcon />}
                onClick={() => setActiveStep(1)}
                sx={{ px: 4, py: 1.5, borderRadius: 2 }}
              >
                شروع ارزیابی
              </Button>
            </Box>
          </Box>
        );
      
      case 1:
        const currentEmployee = getCurrentEmployee();
        if (!currentEmployee) return null;
        
        return (
          <Box sx={{ p: 3 }}>
            <Box sx={{ mb: 4 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                <Box
                  component="img"
                  src={ous.find(ou => ou.name === selectedOU)?.logo}
                  alt={selectedOU}
                  sx={{ width: 40, height: 40, objectFit: 'contain', mr: 2 }}
                />
                <Typography variant="h5" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
                  {selectedOU}
                </Typography>
              </Box>
              
              <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
                <Typography variant="body1" sx={{ mr: 2 }}>
                  پیشرفت:
                </Typography>
                <Box sx={{ flexGrow: 1, height: 10, bgcolor: 'background.paper', borderRadius: 5, overflow: 'hidden' }}>
                  <Box 
                    sx={{ 
                      height: '100%', 
                      width: `${getProgressPercentage()}%`, 
                      bgcolor: 'primary.main',
                      transition: 'width 0.5s ease'
                    }} 
                  />
                </Box>
                <Typography variant="body2" sx={{ ml: 2, color: 'text.secondary' }}>
                  {currentEmployeeIndex + 1} از {groupedEmployees[selectedOU]?.length || 0}
                </Typography>
              </Box>
            </Box>
            
            <Card sx={{ mb: 4, borderRadius: 3, overflow: 'hidden' }}>
              <Box sx={{ 
                p: 3, 
                bgcolor: 'primary.main', 
                color: 'white',
                display: 'flex',
                alignItems: 'center'
              }}>
                <Avatar 
                  sx={{ 
                    width: 60, 
                    height: 60, 
                    bgcolor: 'white', 
                    color: 'primary.main',
                    fontSize: '1.5rem',
                    mr: 2
                  }}
                >
                  {currentEmployee.name.charAt(0)}
                </Avatar>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                    {currentEmployee.name}
                  </Typography>
                  <Typography variant="body2" sx={{ opacity: 0.8 }}>
                    {currentEmployee.department}
                  </Typography>
                </Box>
              </Box>
              
              <CardContent sx={{ p: 3 }}>
                <Grid container spacing={3}>
                  {EVALUATION_CRITERIA.map((criterion) => (
                    <Grid item xs={12} key={criterion.id}>
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 1 }}>
                          {criterion.label}
                        </Typography>
                        <Rating
                          value={ratings[currentEmployee.id]?.[criterion.id] || 0}
                          onChange={(event, newValue) => {
                            handleRatingChange(currentEmployee.id, criterion.id, newValue);
                          }}
                          precision={1}
                          dir="ltr"
                          icon={<StarIcon fontSize="large" sx={{ color: 'primary.main' }} />}
                          emptyIcon={<StarBorderIcon fontSize="large" sx={{ color: 'primary.light', opacity: 0.5 }} />}
                          sx={{ fontSize: '2rem' }}
                        />
                      </Box>
                    </Grid>
                  ))}
                </Grid>
              </CardContent>
            </Card>
            
            <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
              <Button
                variant="outlined"
                color="primary"
                startIcon={<ArrowBackIcon />}
                onClick={() => setActiveStep(0)}
                sx={{ px: 4, py: 1.5, borderRadius: 2 }}
              >
                قبلی
              </Button>
              
              <Button
                variant="contained"
                color="primary"
                endIcon={<ArrowForwardIcon />}
                onClick={() => setActiveStep(2)}
                disabled={currentEmployeeIndex === (groupedEmployees[selectedOU]?.length || 0) - 1 && activeStep === EVALUATION_STEPS.length - 1}
                sx={{ px: 4, py: 1.5, borderRadius: 2 }}
              >
                {currentEmployeeIndex === (groupedEmployees[selectedOU]?.length || 0) - 1 ? 'مرور نهایی' : 'بعدی'}
              </Button>
            </Box>
          </Box>
        );
      
      case 2:
        return (
          <Box sx={{ p: 3 }}>
            <Typography variant="h5" gutterBottom sx={{ fontWeight: 'bold', color: 'primary.main', mb: 4 }}>
              مرور و تایید نهایی
            </Typography>
            
            <Typography variant="body1" sx={{ mb: 3 }}>
              لطفا ارزیابی‌های خود را مرور کنید و در صورت اطمینان، آن‌ها را ثبت کنید.
            </Typography>
            
            <Paper sx={{ p: 3, mb: 4, borderRadius: 3 }}>
              <Typography variant="h6" sx={{ mb: 2, fontWeight: 600 }}>
                خلاصه ارزیابی‌ها
              </Typography>
              
              <Divider sx={{ mb: 3 }} />
              
              {Object.keys(ratings).map(employeeId => {
                const employee = employees.find(e => e.id === parseInt(employeeId));
                if (!employee) return null;
                
                const employeeRatings = ratings[employeeId];
                const hasRated = Object.values(employeeRatings).some(value => value > 0);
                
                if (!hasRated) return null;
                
                return (
                  <Box key={employeeId} sx={{ mb: 3 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                      <Avatar 
                        sx={{ 
                          width: 40, 
                          height: 40, 
                          bgcolor: 'primary.main', 
                          color: 'white',
                          mr: 2
                        }}
                      >
                        {employee.name.charAt(0)}
                      </Avatar>
                      <Typography variant="subtitle1" sx={{ fontWeight: 600 }}>
                        {employee.name}
                      </Typography>
                    </Box>
                    
                    <Grid container spacing={2}>
                      {EVALUATION_CRITERIA.map(criterion => {
                        const rating = employeeRatings[criterion.id];
                        if (rating === 0) return null;
                        
                        return (
                          <Grid item xs={12} sm={6} key={criterion.id}>
                            <Box sx={{ display: 'flex', alignItems: 'center' }}>
                              <Typography variant="body2" sx={{ minWidth: 150 }}>
                                {criterion.label}:
                              </Typography>
                              <Rating
                                value={rating}
                                readOnly
                                precision={1}
                                dir="ltr"
                                icon={<StarIcon fontSize="small" sx={{ color: 'primary.main' }} />}
                                emptyIcon={<StarBorderIcon fontSize="small" sx={{ color: 'primary.light', opacity: 0.5 }} />}
                              />
                            </Box>
                          </Grid>
                        );
                      })}
                    </Grid>
                    
                    <Divider sx={{ mt: 2 }} />
                  </Box>
                );
              })}
            </Paper>
            
            <Box sx={{ display: 'flex', justifyContent: 'space-between' }}>
              <Button
                variant="outlined"
                color="primary"
                startIcon={<ArrowBackIcon />}
                onClick={() => setActiveStep(1)}
                sx={{ px: 4, py: 1.5, borderRadius: 2 }}
              >
                بازگشت
              </Button>
              
              <Button
                variant="contained"
                color="primary"
                endIcon={<SendIcon />}
                onClick={handleSubmit}
                disabled={loading}
                sx={{ px: 4, py: 1.5, borderRadius: 2 }}
              >
                {loading ? <CircularProgress size={24} color="inherit" /> : 'ثبت رای‌ها'}
              </Button>
            </Box>
          </Box>
        );
      
      default:
        return null;
    }
  };

  if (!isAuthenticated) {
    return (
      <Container maxWidth="md">
        <Fade in={true} timeout={500}>
          <Box sx={{ mt: 4 }}>
            <Alert severity="error" icon={<ErrorIcon />}>
              لطفا برای رای دادن وارد شوید
            </Alert>
          </Box>
        </Fade>
      </Container>
    );
  }

  if (loading && !selectedOU) {
    return (
      <Container maxWidth="md">
        <Box sx={{ mt: 4, display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
          <CircularProgress sx={{ mb: 2 }} />
          <Typography variant="body1" color="text.secondary">
            در حال بارگذاری...
          </Typography>
        </Box>
      </Container>
    );
  }

  if (hasVoted && !isAdmin) {
    return (
      <Container maxWidth="md">
        <Fade in={true} timeout={500}>
          <Box sx={{ mt: 4 }}>
            <Card 
              elevation={0}
              sx={{ 
                p: 4, 
                textAlign: 'center',
                border: '1px solid rgba(0,0,0,0.08)',
                background: 'linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%)',
                borderRadius: 3,
                boxShadow: '0 8px 24px rgba(0,0,0,0.05)'
              }}
            >
              <Box sx={{ 
                width: 80, 
                height: 80, 
                borderRadius: '50%', 
                backgroundColor: 'rgba(16, 124, 16, 0.1)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                margin: '0 auto 24px'
              }}>
                <CheckCircleIcon sx={{ fontSize: 60, color: '#107C10' }} />
              </Box>
              <Typography variant="h4" gutterBottom sx={{ fontWeight: 600, color: '#107C10' }}>
                با تشکر از رای شما!
              </Typography>
              <Typography variant="body1" color="text.secondary" paragraph sx={{ mb: 4 }}>
                رای شما با موفقیت ثبت شد. نتایج پس از پایان زمان رای‌گیری قابل مشاهده خواهد بود.
              </Typography>
              <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', mt: 3 }}>
                <Chip
                  icon={<VoteIcon />}
                  label="رای ثبت شد"
                  color="success"
                  sx={{ 
                    borderRadius: 2,
                    backgroundColor: '#107C10',
                    color: 'white',
                    '& .MuiChip-icon': { color: 'white' }
                  }}
                />
                <Button
                  variant="outlined"
                  onClick={handleLogout}
                  startIcon={<LogoutIcon />}
                  sx={{
                    borderColor: '#0078D4',
                    color: '#0078D4',
                    '&:hover': {
                      borderColor: '#106EBE',
                      backgroundColor: 'rgba(0,120,212,0.04)'
                    }
                  }}
                >
                  خروج از حساب کاربری
                </Button>
              </Box>
            </Card>
          </Box>
        </Fade>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg">
      <Box sx={{ mt: 4, mb: 6 }}>
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          <Paper 
            elevation={0} 
            sx={{ 
              p: 3, 
              mb: 4, 
              borderRadius: 3,
              background: 'linear-gradient(135deg, #0078D4 0%, #106EBE 100%)',
              color: 'white',
              boxShadow: '0 8px 24px rgba(0,120,212,0.15)'
            }}
          >
            <Box sx={{ textAlign: 'center', mb: 2 }}>
              <VoteIcon sx={{ fontSize: 40, mb: 1 }} />
              <Typography variant="h4" gutterBottom sx={{ fontWeight: 600 }}>
                ارزیابی کارمندان
              </Typography>
              <Typography variant="body1" sx={{ opacity: 0.9 }}>
                برای ارزیابی هر کارمند، روی دکمه رای دادن کلیک کنید
              </Typography>
            </Box>
          </Paper>

          {selectedOU ? (
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <IconButton 
                    onClick={handleBackToOUs}
                    sx={{ 
                      backgroundColor: '#f5f5f5',
                      '&:hover': { backgroundColor: '#e0e0e0' },
                      mr: 2
                    }}
                  >
                    <ArrowBackIcon />
                  </IconButton>
                  <Typography variant="h6" sx={{ color: '#1a237e' }}>
                    کارمندان {selectedOU}
                  </Typography>
                </Box>
                {isAdmin && (
                  <Button
                    variant="contained"
                    onClick={() => setOpenAddEmployeeDialog(true)}
                    startIcon={<PersonIcon />}
                    sx={{
                      backgroundColor: '#0078D4',
                      '&:hover': { backgroundColor: '#106EBE' },
                      borderRadius: 2,
                      boxShadow: '0 4px 12px rgba(0,120,212,0.2)'
                    }}
                  >
                    افزودن کارمند جدید
                  </Button>
                )}
              </Box>

              <Grid container spacing={3}>
                {groupedEmployees[selectedOU].map((employee) => (
                  <Grid item xs={12} sm={6} md={4} key={employee.id}>
                    <Card 
                      elevation={0}
                      sx={{ 
                        p: 3,
                        borderRadius: 3,
                        border: '1px solid rgba(0,0,0,0.08)',
                        background: 'linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%)',
                        boxShadow: '0 8px 24px rgba(0,0,0,0.05)',
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          transform: 'translateY(-4px)',
                          boxShadow: '0 12px 28px rgba(0,0,0,0.1)',
                        }
                      }}
                    >
                      <Box sx={{ 
                        display: 'flex', 
                        flexDirection: 'column',
                        alignItems: 'center',
                        textAlign: 'center',
                        mb: 3
                      }}>
                        <Box sx={{ 
                          width: '100%',
                          height: 120,
                          borderRadius: 2,
                          background: 'linear-gradient(135deg, #0078D4 0%, #106EBE 100%)',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          mb: 2,
                          boxShadow: '0 8px 24px rgba(0,120,212,0.2)'
                        }}>
                          <Typography variant="h3" sx={{ color: 'white', fontWeight: 600 }}>
                            {employee.name}
                          </Typography>
                        </Box>
                        <Typography variant="body1" color="text.secondary" sx={{ mb: 2 }}>
                          {employee.position}
                        </Typography>
                        <Button
                          variant="contained"
                          fullWidth
                          startIcon={isRatingComplete(employee.id) ? <EditIcon /> : <VoteIcon />}
                          onClick={() => handleOpenDialog(employee)}
                          sx={{
                            backgroundColor: isRatingComplete(employee.id) ? '#107C10' : '#0078D4',
                            '&:hover': {
                              backgroundColor: isRatingComplete(employee.id) ? '#0C5E0C' : '#106EBE',
                            },
                            py: 1.5,
                            borderRadius: 2,
                            boxShadow: isRatingComplete(employee.id) 
                              ? '0 4px 12px rgba(16,124,16,0.2)' 
                              : '0 4px 12px rgba(0,120,212,0.2)'
                          }}
                        >
                          {isRatingComplete(employee.id) ? 'ویرایش رای' : 'رای دادن'}
                        </Button>
                      </Box>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </Box>
          ) : (
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Card sx={{ 
                  borderRadius: 2,
                  boxShadow: 3,
                  height: '100%'
                }}>
                  <CardContent>
                    <Typography variant="h6" sx={{ 
                      mb: 2,
                      color: '#1a237e',
                      fontWeight: 'bold'
                    }}>
                      لیست گروه‌ها
                    </Typography>
                    <Box sx={{ 
                      display: 'grid',
                      gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',
                      gap: 2,
                      padding: 1
                    }}>
                      {ous.map((ou) => (
                        <Card
                          key={ou.name}
                          sx={{ 
                            cursor: 'pointer',
                            transition: 'all 0.2s',
                            '&:hover': { 
                              transform: 'translateY(-4px)',
                              boxShadow: 4,
                              backgroundColor: '#f5f5f5'
                            },
                            height: '100px',
                            display: 'flex',
                            flexDirection: 'column',
                            justifyContent: 'center',
                            alignItems: 'center',
                            textAlign: 'center',
                            padding: 2
                          }}
                          onClick={() => handleOUClick(ou.name)}
                        >
                          <Box sx={{ 
                            display: 'flex', 
                            flexDirection: 'column', 
                            alignItems: 'center',
                            gap: 1
                          }}>
                            <Box
                              component="img"
                              src={ou.logo}
                              alt={ou.label}
                              sx={{
                                width: 40,
                                height: 40,
                                objectFit: 'contain',
                                mb: 1
                              }}
                            />
                            <Typography 
                              variant="subtitle1" 
                              sx={{ 
                                fontWeight: 500,
                                color: '#1a237e'
                              }}
                            >
                              {ou.label}
                            </Typography>
                          </Box>
                        </Card>
                      ))}
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          )}
        </motion.div>
      </Box>

      <Snackbar
        open={openSnackbar}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity={error ? 'error' : 'success'}
          sx={{ 
            width: '100%',
            backgroundColor: error ? '#FDE7E9' : '#DFF6DD',
            color: error ? '#A4262C' : '#107C10',
            '& .MuiAlert-icon': {
              color: error ? '#A4262C' : '#107C10',
            }
          }}
        >
          {error || success}
        </Alert>
      </Snackbar>

      <Dialog 
        open={openDialog} 
        onClose={handleCloseDialog}
        maxWidth="sm"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: 3,
            boxShadow: '0 8px 32px rgba(0,0,0,0.1)',
            overflow: 'hidden'
          }
        }}
      >
        {selectedEmployee && (
          <>
            <Box sx={{ 
              background: 'linear-gradient(135deg, #0078D4 0%, #106EBE 100%)',
              p: 4,
              color: 'white',
              position: 'relative',
              textAlign: 'center'
            }}>
              <IconButton 
                onClick={handleCloseDialog} 
                size="small"
                sx={{ 
                  position: 'absolute',
                  top: 16,
                  right: 16,
                  color: 'white',
                  '&:hover': {
                    backgroundColor: 'rgba(255,255,255,0.1)'
                  }
                }}
              >
                <CloseIcon />
              </IconButton>
              
              <Typography variant="h4" sx={{ fontWeight: 700, mb: 1, textShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>
                {selectedEmployee.name}
              </Typography>
              <Typography variant="h6" sx={{ opacity: 0.9, fontWeight: 500 }}>
                {selectedEmployee.position}
              </Typography>
            </Box>
            
            <DialogContent sx={{ p: 4 }}>
              <Typography variant="h6" sx={{ mb: 3, fontWeight: 600, textAlign: 'center' }}>
                لطفا معیارهای زیر را ارزیابی کنید
              </Typography>
              <Grid container spacing={3}>
                {EVALUATION_CRITERIA.map((criterion) => (
                  <Grid item xs={12} key={criterion.id}>
                    <Paper 
                      elevation={0}
                      sx={{ 
                        p: 3,
                        borderRadius: 2,
                        border: '1px solid rgba(0,0,0,0.08)',
                        background: 'linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%)',
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          boxShadow: '0 4px 12px rgba(0,0,0,0.05)',
                          transform: 'translateY(-2px)'
                        }
                      }}
                    >
                      <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
                        <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, textAlign: 'center' }}>
                          {criterion.label}
                        </Typography>
                        <CustomRating
                          value={ratings[selectedEmployee.id]?.[criterion.id] || 0}
                          onChange={(event, newValue) => {
                            handleRatingChange(selectedEmployee.id, criterion.id, newValue);
                          }}
                        />
                      </Box>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </DialogContent>
            <Box sx={{ 
              p: 3, 
              borderTop: '1px solid rgba(0,0,0,0.08)',
              display: 'flex',
              justifyContent: 'flex-end',
              gap: 2
            }}>
              <Button 
                onClick={handleCloseDialog} 
                sx={{ 
                  color: 'text.secondary',
                  '&:hover': {
                    backgroundColor: 'rgba(0,0,0,0.04)'
                  }
                }}
              >
                انصراف
              </Button>
              <Button
                variant="contained"
                onClick={() => setActiveStep(2)}
                disabled={!isRatingComplete(selectedEmployee.id)}
                sx={{
                  backgroundColor: '#0078D4',
                  '&:hover': {
                    backgroundColor: '#106EBE',
                  },
                  '&.Mui-disabled': {
                    backgroundColor: '#F3F2F1',
                    color: '#A19F9D',
                  },
                  px: 4,
                  py: 1
                }}
              >
                مرور نهایی
              </Button>
            </Box>
          </>
        )}
      </Dialog>

      {/* Dialog for adding new employee */}
      <Dialog open={openAddEmployeeDialog} onClose={() => setOpenAddEmployeeDialog(false)}>
        <DialogTitle>افزودن کارمند جدید</DialogTitle>
        <DialogContent>
          <DialogContentText>
            لطفا اطلاعات کارمند جدید را وارد کنید.
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            label="نام کارمند"
            type="text"
            fullWidth
            variant="outlined"
            value={newEmployee.name}
            onChange={(e) => setNewEmployee(prev => ({ ...prev, name: e.target.value }))}
          />
          <TextField
            margin="dense"
            label="سمت"
            type="text"
            fullWidth
            variant="outlined"
            value={newEmployee.position}
            onChange={(e) => setNewEmployee(prev => ({ ...prev, position: e.target.value }))}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenAddEmployeeDialog(false)}>انصراف</Button>
          <Button onClick={handleAddEmployee} variant="contained" color="primary">
            افزودن
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
}

export default Voting; 